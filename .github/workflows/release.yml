on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: |
          chmod u+x gradlew
          ./gradlew html:dist
          rm -rf html/build/dist/WEB-INF
          mv html/build/dist/functions html/build
          zip -r joric-web-${{ github.ref_name }}.zip html/build/dist

    - name: Publish to Cloudflare Pages
      #uses: cloudflare/wrangler-action@v3
      #with:
      #    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #    accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #    workingDirectory: html/build
      #    command: pages deploy dist --project-name='joric' --commit-dirty=true
      uses: cloudflare/pages-action@1
      with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 'joric'
          workingDirectory: html/build
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: master
          wranglerVersion: '3'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./joric-web-${{ github.ref_name }}.zip
        asset_name: joric-web-${{ github.ref_name }}.zip
        asset_content_type: application/zip
